<?xml version="1.0"?>
 <launch>

  <arg name="map_yaml" default="$(find maps)/maps/clf_final.yaml" />
  <arg name="enable_tf_bridge" default="true" />

  <!-- publishes the map -->
  <node pkg="map_server" type="map_server" args="$(arg map_yaml)" name="map_server_node" respawn="true" />

  <!-- converts RSB poses to ROS transform -->
  <group if="$(arg enable_tf_bridge)">
    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_amiro0_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="amiro0/base_link" />
      <param name="rsb_scope" value="/amiro0/pose" />
      <param name="rate" value="10" />
    </node>
  
    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_amiro1_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="amiro1/base_link" />
      <param name="rsb_scope" value="/amiro1/pose" />
      <param name="rate" value="10" />
    </node>

    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_amiro2_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="amiro2/base_link" />
      <param name="rsb_scope" value="/amiro2/pose" />
      <param name="rate" value="10" />
    </node>
    
    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_amiro3_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="amiro3/base_link" />
      <param name="rsb_scope" value="/amiro3/pose" />
      <param name="rate" value="10" />
    </node>
    
    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_tobi_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="tobi/base_link" />
      <param name="rsb_scope" value="/ros4rsb/slampose/tobi" />
      <param name="rate" value="10" />
    </node>
    
    <node pkg="pose_to_tf_bridge" type="pose_to_tf_bridge" name="pose_to_tf_bridge_meka_node" respawn="true" >
      <param name="frame_id" value="world" />
      <param name="child_frame" value="tobi/base_link" />
      <param name="rsb_scope" value="/ros4rsb/slampose/meka" />
      <param name="rate" value="10" />
    </node>
  </group>

  <!-- convert ROS pose to RSB pose (for setting current pose) -->
  <node pkg="rospose_to_rsbpose_bridge" type="rospose_to_rsbpose_bridge" name="rospose_to_rsbpose_bridge_node_0" respawn="true" >
    <param name="rsb_scope" value="/setPosition/0" />
    <param name="ros_topic" value="/initialpose/0" />
  </node>
  
  <node pkg="rospose_to_rsbpose_bridge" type="rospose_to_rsbpose_bridge" name="rospose_to_rsbpose_bridge_node_1" respawn="true" >
    <param name="rsb_scope" value="/setPosition/1" />
    <param name="ros_topic" value="/initialpose/1" />
  </node>
  
  <node pkg="rospose_to_rsbpose_bridge" type="rospose_to_rsbpose_bridge" name="rospose_to_rsbpose_bridge_node_2" respawn="true" >
    <param name="rsb_scope" value="/setPosition/2" />
    <param name="ros_topic" value="/initialpose/2" />
  </node>
  
  <node pkg="rospose_to_rsbpose_bridge" type="rospose_to_rsbpose_bridge" name="rospose_to_rsbpose_bridge_node_3" respawn="true" >
    <param name="rsb_scope" value="/setPosition/3" />
    <param name="ros_topic" value="/initialpose/3" />
  </node>

  <!-- convert ROS pose to RSB pose (for setting navigation goal) -->
  <node pkg="navgoal_to_rsbpose_bridge" type="navgoal_to_rsbpose_bridge" name="navgoal_to_rsbpose_bridge_node_0" respawn="true" >
    <param name="rsb_scope" value="/setTargetPose/0" />
    <param name="ros_topic" value="/move_base_simple/goal/0" />
  </node>

  <!-- visualize RSB communication -->
  <node pkg="com_viz" type="com_viz" name="com_viz_state" respawn="true" >
    <param name="rsb_viz_scope" value="/" /> <!--Viz everything on the root scope-->
    <param name="rsb_viz_subscope" value="" /> <!--Don't care about the subscope-->
    <param name="rsb_viz_content" value="" /> <!--Don't care about the content-->
    <param name="rsb_viz_destroy_content" value="" /> <!--We don't want to have a specific message content, which destroys the marker-->
    <param name="marker_remain_time" value="1.0" /> <!--Marker is deleted after 1 second-->
    <param name="marker_scale_x" value="0.03" />
    <param name="marker_scale_y" value="0.06" />
    <param name="marker_scale_z" value="1.0" />
    <param name="marker_color_a" value="1.0" />
    <param name="marker_color_r" value="0.0" />
    <param name="marker_color_g" value="1.0" />
    <param name="marker_color_b" value="0.0" />
    <param name="marker_class" value="0" /> <!--Arrow-->
  </node>
  
  <!-- visualize waypoint notification -->
  <node pkg="com_viz" type="com_viz" name="com_viz_waypoint" respawn="true" >
    <param name="rsb_viz_scope" value="/" /> <!--Viz everything on the root scope-->
    <param name="rsb_viz_subscope" value="waypoint" /> <!--Only viz the waypoints-->
    <param name="rsb_viz_content" value="entered" /> <!--The content of the msg must be "entered", to create the marker-->
    <param name="rsb_viz_destroy_content" value="left" /> <!--The content of the msg must be "left", to destroy the marker-->
    <param name="marker_remain_time" value="-1.0" /> <!--Disable marker destruction after a time by setting a negative value-->
    <param name="marker_scale_x" value="5.0" />
    <param name="marker_scale_y" value="5.0" />
    <param name="marker_scale_z" value="0.05" />
    <param name="marker_color_a" value="1.0" />
    <param name="marker_color_r" value="1.0" />
    <param name="marker_color_g" value="0.0" />
    <param name="marker_color_b" value="0.0" />
    <param name="marker_class" value="2" /> <!--Spheer-->
  </node>
  

  <node pkg="navgoal_to_rsbpose_bridge" type="navgoal_to_rsbpose_bridge" name="navgoal_to_rsbpose_bridge_node_1" respawn="true" >
    <param name="rsb_scope" value="/setTargetPose/1" />
    <param name="ros_topic" value="/move_base_simple/goal/1" />
  </node>
  
  <node pkg="navgoal_to_rsbpose_bridge" type="navgoal_to_rsbpose_bridge" name="navgoal_to_rsbpose_bridge_node_2" respawn="true" >
    <param name="rsb_scope" value="/setTargetPose/2" />
    <param name="ros_topic" value="/move_base_simple/goal/2" />
  </node>
  
  <node pkg="navgoal_to_rsbpose_bridge" type="navgoal_to_rsbpose_bridge" name="navgoal_to_rsbpose_bridge_node_3" respawn="true" >
    <param name="rsb_scope" value="/setTargetPose/3" />
    <param name="ros_topic" value="/move_base_simple/goal/3" />
  </node>
  
  <!-- display path -->
  <node pkg="rsb_path_to_ros_path" type="rsb_path_to_ros_path_node" name="rsb_path_to_ros_path_node_0" respawn="true">
    <param name="rsb_scope" value="/amiro0/path" />
    <param name="ros_topic" value="/amiro0/path" />
  </node>

  <node pkg="rsb_path_to_ros_path" type="rsb_path_to_ros_path_node" name="rsb_path_to_ros_path_node_1" respawn="true">
    <param name="rsb_scope" value="/amiro1/path" />
    <param name="ros_topic" value="/amiro1/path" />
  </node>
  
  <node pkg="rsb_path_to_ros_path" type="rsb_path_to_ros_path_node" name="rsb_path_to_ros_path_node_2" respawn="true">
    <param name="rsb_scope" value="/amiro2/path" />
    <param name="ros_topic" value="/amiro2/path" />
  </node>
  
  <node pkg="rsb_path_to_ros_path" type="rsb_path_to_ros_path_node" name="rsb_path_to_ros_path_node_3" respawn="true">
    <param name="rsb_scope" value="/amiro3/path" />
    <param name="ros_topic" value="/amiro3/path" />
  </node>
  
  <node pkg="tf" type="static_transform_publisher" name="map_tf" args="0 0 0 0 0 0 world map 10" />


  <!-- ROBOT MODELS: TOBI -->
  <!--<node pkg="tf" type="static_transform_publisher" name="tobi_tf" args="10 12 0 1 0 0 world tobi/base_link 10"/>-->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find tobi_description)/urdf/tobi_3of4.urdf.xacro" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="tobi" />
  </include>
  
  <!-- ROBOT MODELS: MEKA -->
<!--   <node pkg="tf" type="static_transform_publisher" name="meka_tf" args="10 10 0 1 0 0 world meka/base_link 10"/> -->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find meka_description)/robots/bie.urdf.xacro hand_mimic:=true torso_mimic:=true" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="meka" />
  </include>
  
  <!-- ROBOT MODELS: AMiRo0 -->
  <!--<node pkg="tf" type="static_transform_publisher" name="amiro0_tf" args="12 12.5 0 1 0 0 world amiro0/base_link 10"/>-->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find demo)/urdf/amiro.urdf" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="amiro0" />
  </include>
  
  <!-- ROBOT MODELS: AMiRo1 -->
  <!--<node pkg="tf" type="static_transform_publisher" name="amiro1_tf" args="12 12 0 1 0 0 world amiro1/base_link 10"/>-->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find demo)/urdf/amiro.urdf" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="amiro1" />
  </include>
  
  <!-- ROBOT MODELS: AMiRo2 -->
  <!--<node pkg="tf" type="static_transform_publisher" name="amiro2_tf" args="12.5 12.5 0 1 0 0 world amiro2/base_link 10"/>-->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find demo)/urdf/amiro.urdf" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="amiro2" />
  </include>
  
  <!-- ROBOT MODELS: AMiRo3 -->
  <!--<node pkg="tf" type="static_transform_publisher" name="amiro3_tf" args="13 13 0 1 0 0 world amiro3/base_link 10"/>-->
  <include file="$(find demo)/launch/robot_viz.xml">
    <arg name="description" value="$(find xacro)/xacro.py $(find demo)/urdf/amiro.urdf" />
    <arg name="use_joint_state_publisher" value="true"/>
    <arg name="gui" value="false" />  
    <arg name="model_prefix" value="amiro3" />
  </include>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find demo)/demo.rviz" respawn="true" />
 </launch>
